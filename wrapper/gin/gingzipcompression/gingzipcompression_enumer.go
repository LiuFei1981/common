// Code Generated By gen-enumer For "Enum Type: GinGZipCompression" - DO NOT EDIT;

/*
 * Copyright 2020-2023 Aldelo, LP
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package gingzipcompression

import (
	"fmt"
	"strconv"
)

// enum names constants
const (
	_GinGZipCompressionName_0 = "UNKNOWN"
	_GinGZipCompressionName_1 = "Default"
	_GinGZipCompressionName_2 = "BestSpeed"
	_GinGZipCompressionName_3 = "BestCompression"
)

// var declares of enum indexes
var (
	_GinGZipCompressionIndex_0 = [...]uint8{0, 7}
	_GinGZipCompressionIndex_1 = [...]uint8{0, 7}
	_GinGZipCompressionIndex_2 = [...]uint8{0, 9}
	_GinGZipCompressionIndex_3 = [...]uint8{0, 15}
)

func (i GinGZipCompression) String() string {
	switch {
	case i == UNKNOWN:
		return _GinGZipCompressionName_0
	case i == Default:
		return _GinGZipCompressionName_1
	case i == BestSpeed:
		return _GinGZipCompressionName_2
	case i == BestCompression:
		return _GinGZipCompressionName_3
	default:
		return ""
	}
}

var _GinGZipCompressionValues = []GinGZipCompression{
	0, // UNKNOWN
	1, // Default
	2, // BestSpeed
	3, // BestCompression
}

var _GinGZipCompressionNameToValueMap = map[string]GinGZipCompression{
	_GinGZipCompressionName_0[0:7]:  0, // UNKNOWN
	_GinGZipCompressionName_1[0:7]:  1, // Default
	_GinGZipCompressionName_2[0:9]:  2, // BestSpeed
	_GinGZipCompressionName_3[0:15]: 3, // BestCompression
}

var _GinGZipCompressionValueToKeyMap = map[GinGZipCompression]string{
	0: _GinGZipCompressionKey_0, // UNKNOWN
	1: _GinGZipCompressionKey_1, // Default
	2: _GinGZipCompressionKey_2, // BestSpeed
	3: _GinGZipCompressionKey_3, // BestCompression
}

var _GinGZipCompressionValueToCaptionMap = map[GinGZipCompression]string{
	0: _GinGZipCompressionCaption_0, // UNKNOWN
	1: _GinGZipCompressionCaption_1, // Default
	2: _GinGZipCompressionCaption_2, // BestSpeed
	3: _GinGZipCompressionCaption_3, // BestCompression
}

var _GinGZipCompressionValueToDescriptionMap = map[GinGZipCompression]string{
	0: _GinGZipCompressionDescription_0, // UNKNOWN
	1: _GinGZipCompressionDescription_1, // Default
	2: _GinGZipCompressionDescription_2, // BestSpeed
	3: _GinGZipCompressionDescription_3, // BestCompression
}

// Valid returns 'true' if the value is listed in the GinGZipCompression enum map definition, 'false' otherwise
func (i GinGZipCompression) Valid() bool {
	for _, v := range _GinGZipCompressionValues {
		if i == v {
			return true
		}
	}

	return false
}

// ParseByName retrieves a GinGZipCompression enum value from the enum string name,
// throws an error if the param is not part of the enum
func (i GinGZipCompression) ParseByName(s string) (GinGZipCompression, error) {
	if val, ok := _GinGZipCompressionNameToValueMap[s]; ok {
		// parse ok
		return val, nil
	}

	// error
	return -1, fmt.Errorf("Enum Name of %s Not Expected In GinGZipCompression Values List", s)
}

// ParseByKey retrieves a GinGZipCompression enum value from the enum string key,
// throws an error if the param is not part of the enum
func (i GinGZipCompression) ParseByKey(s string) (GinGZipCompression, error) {
	for k, v := range _GinGZipCompressionValueToKeyMap {
		if v == s {
			// parse ok
			return k, nil
		}
	}

	// error
	return -1, fmt.Errorf("Enum Key of %s Not Expected In GinGZipCompression Keys List", s)
}

// Key retrieves a GinGZipCompression enum string key
func (i GinGZipCompression) Key() string {
	if val, ok := _GinGZipCompressionValueToKeyMap[i]; ok {
		// found
		return val
	} else {
		// not found
		return ""
	}
}

// Caption retrieves a GinGZipCompression enum string caption
func (i GinGZipCompression) Caption() string {
	if val, ok := _GinGZipCompressionValueToCaptionMap[i]; ok {
		// found
		return val
	} else {
		// not found
		return ""
	}
}

// Description retrieves a GinGZipCompression enum string description
func (i GinGZipCompression) Description() string {
	if val, ok := _GinGZipCompressionValueToDescriptionMap[i]; ok {
		// found
		return val
	} else {
		// not found
		return ""
	}
}

// IntValue gets the intrinsic enum integer value
func (i GinGZipCompression) IntValue() int {
	return int(i)
}

// IntString gets the intrinsic enum integer value represented in string format
func (i GinGZipCompression) IntString() string {
	return strconv.Itoa(int(i))
}

// ValueSlice returns all values of the enum GinGZipCompression in a slice
func (i GinGZipCompression) ValueSlice() []GinGZipCompression {
	return _GinGZipCompressionValues
}

// NameMap returns all names of the enum GinGZipCompression in a K:name,V:GinGZipCompression map
func (i GinGZipCompression) NameMap() map[string]GinGZipCompression {
	return _GinGZipCompressionNameToValueMap
}

// KeyMap returns all keys of the enum GinGZipCompression in a K:GinGZipCompression,V:key map
func (i GinGZipCompression) KeyMap() map[GinGZipCompression]string {
	return _GinGZipCompressionValueToKeyMap
}

// CaptionMap returns all captions of the enum GinGZipCompression in a K:GinGZipCompression,V:caption map
func (i GinGZipCompression) CaptionMap() map[GinGZipCompression]string {
	return _GinGZipCompressionValueToCaptionMap
}

// DescriptionMap returns all descriptions of the enum GinGZipCompression in a K:GinGZipCompression,V:description map
func (i GinGZipCompression) DescriptionMap() map[GinGZipCompression]string {
	return _GinGZipCompressionValueToDescriptionMap
}
