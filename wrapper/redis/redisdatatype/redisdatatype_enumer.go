// Code Generated By gen-enumer For "Enum Type: RedisDataType" - DO NOT EDIT;

/*
 * Copyright 2020 Aldelo, LP
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package redisdatatype

import (
	"fmt"
	"strconv"
)

const (
	_RedisDataTypeKey_0 = "UNKNOWN"
	_RedisDataTypeKey_1 = "String"
	_RedisDataTypeKey_2 = "Bool"
	_RedisDataTypeKey_3 = "Int"
	_RedisDataTypeKey_4 = "Int64"
	_RedisDataTypeKey_5 = "Float64"
	_RedisDataTypeKey_6 = "Bytes"
	_RedisDataTypeKey_7 = "Json"
	_RedisDataTypeKey_8 = "Time"
)

const (
	_RedisDataTypeCaption_0 = "UNKNOWN"
	_RedisDataTypeCaption_1 = "String"
	_RedisDataTypeCaption_2 = "Bool"
	_RedisDataTypeCaption_3 = "Int"
	_RedisDataTypeCaption_4 = "Int64"
	_RedisDataTypeCaption_5 = "Float64"
	_RedisDataTypeCaption_6 = "Bytes"
	_RedisDataTypeCaption_7 = "Json"
	_RedisDataTypeCaption_8 = "Time"
)

const (
	_RedisDataTypeDescription_0 = "UNKNOWN"
	_RedisDataTypeDescription_1 = "String"
	_RedisDataTypeDescription_2 = "Bool"
	_RedisDataTypeDescription_3 = "Int"
	_RedisDataTypeDescription_4 = "Int64"
	_RedisDataTypeDescription_5 = "Float64"
	_RedisDataTypeDescription_6 = "Bytes"
	_RedisDataTypeDescription_7 = "Json"
	_RedisDataTypeDescription_8 = "Time"
)

// enum names constants
const (
	_RedisDataTypeName_0 = "UNKNOWN"
	_RedisDataTypeName_1 = "String"
	_RedisDataTypeName_2 = "Bool"
	_RedisDataTypeName_3 = "Int"
	_RedisDataTypeName_4 = "Int64"
	_RedisDataTypeName_5 = "Float64"
	_RedisDataTypeName_6 = "Bytes"
	_RedisDataTypeName_7 = "Json"
	_RedisDataTypeName_8 = "Time"
)

// var declares of enum indexes
var (
	_RedisDataTypeIndex_0 = [...]uint8{0, 7}
	_RedisDataTypeIndex_1 = [...]uint8{0, 6}
	_RedisDataTypeIndex_2 = [...]uint8{0, 4}
	_RedisDataTypeIndex_3 = [...]uint8{0, 3}
	_RedisDataTypeIndex_4 = [...]uint8{0, 5}
	_RedisDataTypeIndex_5 = [...]uint8{0, 7}
	_RedisDataTypeIndex_6 = [...]uint8{0, 5}
	_RedisDataTypeIndex_7 = [...]uint8{0, 4}
	_RedisDataTypeIndex_8 = [...]uint8{0, 4}
)

func (i RedisDataType) String() string {
	switch {
	case i == UNKNOWN:
		return _RedisDataTypeName_0
	case i == String:
		return _RedisDataTypeName_1
	case i == Bool:
		return _RedisDataTypeName_2
	case i == Int:
		return _RedisDataTypeName_3
	case i == Int64:
		return _RedisDataTypeName_4
	case i == Float64:
		return _RedisDataTypeName_5
	case i == Bytes:
		return _RedisDataTypeName_6
	case i == Json:
		return _RedisDataTypeName_7
	case i == Time:
		return _RedisDataTypeName_8
	default:
		return ""
	}
}

var _RedisDataTypeValues = []RedisDataType{
	0, // UNKNOWN
	1, // String
	2, // Bool
	3, // Int
	4, // Int64
	5, // Float64
	6, // Bytes
	7, // Json
	8, // Time
}

var _RedisDataTypeNameToValueMap = map[string]RedisDataType{
	_RedisDataTypeName_0[0:7]: 0, // UNKNOWN
	_RedisDataTypeName_1[0:6]: 1, // String
	_RedisDataTypeName_2[0:4]: 2, // Bool
	_RedisDataTypeName_3[0:3]: 3, // Int
	_RedisDataTypeName_4[0:5]: 4, // Int64
	_RedisDataTypeName_5[0:7]: 5, // Float64
	_RedisDataTypeName_6[0:5]: 6, // Bytes
	_RedisDataTypeName_7[0:4]: 7, // Json
	_RedisDataTypeName_8[0:4]: 8, // Time
}

var _RedisDataTypeValueToKeyMap = map[RedisDataType]string{
	0: _RedisDataTypeKey_0, // UNKNOWN
	1: _RedisDataTypeKey_1, // String
	2: _RedisDataTypeKey_2, // Bool
	3: _RedisDataTypeKey_3, // Int
	4: _RedisDataTypeKey_4, // Int64
	5: _RedisDataTypeKey_5, // Float64
	6: _RedisDataTypeKey_6, // Bytes
	7: _RedisDataTypeKey_7, // Json
	8: _RedisDataTypeKey_8, // Time
}

var _RedisDataTypeValueToCaptionMap = map[RedisDataType]string{
	0: _RedisDataTypeCaption_0, // UNKNOWN
	1: _RedisDataTypeCaption_1, // String
	2: _RedisDataTypeCaption_2, // Bool
	3: _RedisDataTypeCaption_3, // Int
	4: _RedisDataTypeCaption_4, // Int64
	5: _RedisDataTypeCaption_5, // Float64
	6: _RedisDataTypeCaption_6, // Bytes
	7: _RedisDataTypeCaption_7, // Json
	8: _RedisDataTypeCaption_8, // Time
}

var _RedisDataTypeValueToDescriptionMap = map[RedisDataType]string{
	0: _RedisDataTypeDescription_0, // UNKNOWN
	1: _RedisDataTypeDescription_1, // String
	2: _RedisDataTypeDescription_2, // Bool
	3: _RedisDataTypeDescription_3, // Int
	4: _RedisDataTypeDescription_4, // Int64
	5: _RedisDataTypeDescription_5, // Float64
	6: _RedisDataTypeDescription_6, // Bytes
	7: _RedisDataTypeDescription_7, // Json
	8: _RedisDataTypeDescription_8, // Time
}

// Valid returns 'true' if the value is listed in the RedisDataType enum map definition, 'false' otherwise
func (i RedisDataType) Valid() bool {
	for _, v := range _RedisDataTypeValues {
		if i == v {
			return true
		}
	}

	return false
}

// ParseByName retrieves a RedisDataType enum value from the enum string name,
// throws an error if the param is not part of the enum
func (i RedisDataType) ParseByName(s string) (RedisDataType, error) {
	if val, ok := _RedisDataTypeNameToValueMap[s]; ok {
		// parse ok
		return val, nil
	}

	// error
	return -1, fmt.Errorf("Enum Name of %s Not Expected In RedisDataType Values List", s)
}

// ParseByKey retrieves a RedisDataType enum value from the enum string key,
// throws an error if the param is not part of the enum
func (i RedisDataType) ParseByKey(s string) (RedisDataType, error) {
	for k, v := range _RedisDataTypeValueToKeyMap {
		if v == s {
			// parse ok
			return k, nil
		}
	}

	// error
	return -1, fmt.Errorf("Enum Key of %s Not Expected In RedisDataType Keys List", s)
}

// Key retrieves a RedisDataType enum string key
func (i RedisDataType) Key() string {
	if val, ok := _RedisDataTypeValueToKeyMap[i]; ok {
		// found
		return val
	} else {
		// not found
		return ""
	}
}

// Caption retrieves a RedisDataType enum string caption
func (i RedisDataType) Caption() string {
	if val, ok := _RedisDataTypeValueToCaptionMap[i]; ok {
		// found
		return val
	} else {
		// not found
		return ""
	}
}

// Description retrieves a RedisDataType enum string description
func (i RedisDataType) Description() string {
	if val, ok := _RedisDataTypeValueToDescriptionMap[i]; ok {
		// found
		return val
	} else {
		// not found
		return ""
	}
}

// IntValue gets the intrinsic enum integer value
func (i RedisDataType) IntValue() int {
	return int(i)
}

// IntString gets the intrinsic enum integer value represented in string format
func (i RedisDataType) IntString() string {
	return strconv.Itoa(int(i))
}

// ValueSlice returns all values of the enum RedisDataType in a slice
func (i RedisDataType) ValueSlice() []RedisDataType {
	return _RedisDataTypeValues
}

// NameMap returns all names of the enum RedisDataType in a K:name,V:RedisDataType map
func (i RedisDataType) NameMap() map[string]RedisDataType {
	return _RedisDataTypeNameToValueMap
}

// KeyMap returns all keys of the enum RedisDataType in a K:RedisDataType,V:key map
func (i RedisDataType) KeyMap() map[RedisDataType]string {
	return _RedisDataTypeValueToKeyMap
}

// CaptionMap returns all captions of the enum RedisDataType in a K:RedisDataType,V:caption map
func (i RedisDataType) CaptionMap() map[RedisDataType]string {
	return _RedisDataTypeValueToCaptionMap
}

// DescriptionMap returns all descriptions of the enum RedisDataType in a K:RedisDataType,V:description map
func (i RedisDataType) DescriptionMap() map[RedisDataType]string {
	return _RedisDataTypeValueToDescriptionMap
}
