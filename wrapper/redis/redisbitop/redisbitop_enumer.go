// Code Generated By gen-enumer For "Enum Type: RedisBitop" - DO NOT EDIT;

/*
 * Copyright 2020-2023 Aldelo, LP
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package redisbitop

import (
	"fmt"
	"strconv"
)

const (
	_RedisBitopKey_0 = "UNKNOWN"
	_RedisBitopKey_1 = "And"
	_RedisBitopKey_2 = "Or"
	_RedisBitopKey_3 = "XOr"
	_RedisBitopKey_4 = "NOT"
)

const (
	_RedisBitopCaption_0 = "UNKNOWN"
	_RedisBitopCaption_1 = "And"
	_RedisBitopCaption_2 = "Or"
	_RedisBitopCaption_3 = "XOr"
	_RedisBitopCaption_4 = "NOT"
)

const (
	_RedisBitopDescription_0 = "UNKNOWN"
	_RedisBitopDescription_1 = "And"
	_RedisBitopDescription_2 = "Or"
	_RedisBitopDescription_3 = "XOr"
	_RedisBitopDescription_4 = "NOT"
)

// enum names constants
const (
	_RedisBitopName_0 = "UNKNOWN"
	_RedisBitopName_1 = "And"
	_RedisBitopName_2 = "Or"
	_RedisBitopName_3 = "XOr"
	_RedisBitopName_4 = "NOT"
)

// var declares of enum indexes
var (
	_RedisBitopIndex_0 = [...]uint8{0, 7}
	_RedisBitopIndex_1 = [...]uint8{0, 3}
	_RedisBitopIndex_2 = [...]uint8{0, 2}
	_RedisBitopIndex_3 = [...]uint8{0, 3}
	_RedisBitopIndex_4 = [...]uint8{0, 3}
)

func (i RedisBitop) String() string {
	switch {
	case i == UNKNOWN:
		return _RedisBitopName_0
	case i == And:
		return _RedisBitopName_1
	case i == Or:
		return _RedisBitopName_2
	case i == XOr:
		return _RedisBitopName_3
	case i == NOT:
		return _RedisBitopName_4
	default:
		return ""
	}
}

var _RedisBitopValues = []RedisBitop{
	0, // UNKNOWN
	1, // And
	2, // Or
	3, // XOr
	4, // NOT
}

var _RedisBitopNameToValueMap = map[string]RedisBitop{
	_RedisBitopName_0[0:7]: 0, // UNKNOWN
	_RedisBitopName_1[0:3]: 1, // And
	_RedisBitopName_2[0:2]: 2, // Or
	_RedisBitopName_3[0:3]: 3, // XOr
	_RedisBitopName_4[0:3]: 4, // NOT
}

var _RedisBitopValueToKeyMap = map[RedisBitop]string{
	0: _RedisBitopKey_0, // UNKNOWN
	1: _RedisBitopKey_1, // And
	2: _RedisBitopKey_2, // Or
	3: _RedisBitopKey_3, // XOr
	4: _RedisBitopKey_4, // NOT
}

var _RedisBitopValueToCaptionMap = map[RedisBitop]string{
	0: _RedisBitopCaption_0, // UNKNOWN
	1: _RedisBitopCaption_1, // And
	2: _RedisBitopCaption_2, // Or
	3: _RedisBitopCaption_3, // XOr
	4: _RedisBitopCaption_4, // NOT
}

var _RedisBitopValueToDescriptionMap = map[RedisBitop]string{
	0: _RedisBitopDescription_0, // UNKNOWN
	1: _RedisBitopDescription_1, // And
	2: _RedisBitopDescription_2, // Or
	3: _RedisBitopDescription_3, // XOr
	4: _RedisBitopDescription_4, // NOT
}

// Valid returns 'true' if the value is listed in the RedisBitop enum map definition, 'false' otherwise
func (i RedisBitop) Valid() bool {
	for _, v := range _RedisBitopValues {
		if i == v {
			return true
		}
	}

	return false
}

// ParseByName retrieves a RedisBitop enum value from the enum string name,
// throws an error if the param is not part of the enum
func (i RedisBitop) ParseByName(s string) (RedisBitop, error) {
	if val, ok := _RedisBitopNameToValueMap[s]; ok {
		// parse ok
		return val, nil
	}

	// error
	return -1, fmt.Errorf("Enum Name of %s Not Expected In RedisBitop Values List", s)
}

// ParseByKey retrieves a RedisBitop enum value from the enum string key,
// throws an error if the param is not part of the enum
func (i RedisBitop) ParseByKey(s string) (RedisBitop, error) {
	for k, v := range _RedisBitopValueToKeyMap {
		if v == s {
			// parse ok
			return k, nil
		}
	}

	// error
	return -1, fmt.Errorf("Enum Key of %s Not Expected In RedisBitop Keys List", s)
}

// Key retrieves a RedisBitop enum string key
func (i RedisBitop) Key() string {
	if val, ok := _RedisBitopValueToKeyMap[i]; ok {
		// found
		return val
	} else {
		// not found
		return ""
	}
}

// Caption retrieves a RedisBitop enum string caption
func (i RedisBitop) Caption() string {
	if val, ok := _RedisBitopValueToCaptionMap[i]; ok {
		// found
		return val
	} else {
		// not found
		return ""
	}
}

// Description retrieves a RedisBitop enum string description
func (i RedisBitop) Description() string {
	if val, ok := _RedisBitopValueToDescriptionMap[i]; ok {
		// found
		return val
	} else {
		// not found
		return ""
	}
}

// IntValue gets the intrinsic enum integer value
func (i RedisBitop) IntValue() int {
	return int(i)
}

// IntString gets the intrinsic enum integer value represented in string format
func (i RedisBitop) IntString() string {
	return strconv.Itoa(int(i))
}

// ValueSlice returns all values of the enum RedisBitop in a slice
func (i RedisBitop) ValueSlice() []RedisBitop {
	return _RedisBitopValues
}

// NameMap returns all names of the enum RedisBitop in a K:name,V:RedisBitop map
func (i RedisBitop) NameMap() map[string]RedisBitop {
	return _RedisBitopNameToValueMap
}

// KeyMap returns all keys of the enum RedisBitop in a K:RedisBitop,V:key map
func (i RedisBitop) KeyMap() map[RedisBitop]string {
	return _RedisBitopValueToKeyMap
}

// CaptionMap returns all captions of the enum RedisBitop in a K:RedisBitop,V:caption map
func (i RedisBitop) CaptionMap() map[RedisBitop]string {
	return _RedisBitopValueToCaptionMap
}

// DescriptionMap returns all descriptions of the enum RedisBitop in a K:RedisBitop,V:description map
func (i RedisBitop) DescriptionMap() map[RedisBitop]string {
	return _RedisBitopValueToDescriptionMap
}
