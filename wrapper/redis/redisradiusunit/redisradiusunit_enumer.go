// Code Generated By gen-enumer For "Enum Type: RedisRadiusUnit" - DO NOT EDIT;

/*
 * Copyright 2020 Aldelo, LP
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package redisradiusunit

import (
	"fmt"
	"strconv"
)

const (
	_RedisRadiusUnitCaption_0 = "UNKNOWN"
	_RedisRadiusUnitCaption_1 = "Meters"
	_RedisRadiusUnitCaption_2 = "Kilometers"
	_RedisRadiusUnitCaption_3 = "Miles"
	_RedisRadiusUnitCaption_4 = "Feet"
)

const (
	_RedisRadiusUnitDescription_0 = "UNKNOWN"
	_RedisRadiusUnitDescription_1 = "Meters"
	_RedisRadiusUnitDescription_2 = "Kilometers"
	_RedisRadiusUnitDescription_3 = "Miles"
	_RedisRadiusUnitDescription_4 = "Feet"
)

// enum names constants
const (
	_RedisRadiusUnitName_0 = "UNKNOWN"
	_RedisRadiusUnitName_1 = "Meters"
	_RedisRadiusUnitName_2 = "Kilometers"
	_RedisRadiusUnitName_3 = "Miles"
	_RedisRadiusUnitName_4 = "Feet"
)

// var declares of enum indexes
var (
	_RedisRadiusUnitIndex_0 = [...]uint8{0, 7}
	_RedisRadiusUnitIndex_1 = [...]uint8{0, 6}
	_RedisRadiusUnitIndex_2 = [...]uint8{0, 10}
	_RedisRadiusUnitIndex_3 = [...]uint8{0, 5}
	_RedisRadiusUnitIndex_4 = [...]uint8{0, 4}
)

func (i RedisRadiusUnit) String() string {
	switch {
	case i == UNKNOWN:
		return _RedisRadiusUnitName_0
	case i == Meters:
		return _RedisRadiusUnitName_1
	case i == Kilometers:
		return _RedisRadiusUnitName_2
	case i == Miles:
		return _RedisRadiusUnitName_3
	case i == Feet:
		return _RedisRadiusUnitName_4
	default:
		return ""
	}
}

var _RedisRadiusUnitValues = []RedisRadiusUnit{
	0, // UNKNOWN
	1, // Meters
	2, // Kilometers
	3, // Miles
	4, // Feet
}

var _RedisRadiusUnitNameToValueMap = map[string]RedisRadiusUnit{
	_RedisRadiusUnitName_0[0:7]:  0, // UNKNOWN
	_RedisRadiusUnitName_1[0:6]:  1, // Meters
	_RedisRadiusUnitName_2[0:10]: 2, // Kilometers
	_RedisRadiusUnitName_3[0:5]:  3, // Miles
	_RedisRadiusUnitName_4[0:4]:  4, // Feet
}

var _RedisRadiusUnitValueToKeyMap = map[RedisRadiusUnit]string{
	0: _RedisRadiusUnitKey_0, // UNKNOWN
	1: _RedisRadiusUnitKey_1, // Meters
	2: _RedisRadiusUnitKey_2, // Kilometers
	3: _RedisRadiusUnitKey_3, // Miles
	4: _RedisRadiusUnitKey_4, // Feet
}

var _RedisRadiusUnitValueToCaptionMap = map[RedisRadiusUnit]string{
	0: _RedisRadiusUnitCaption_0, // UNKNOWN
	1: _RedisRadiusUnitCaption_1, // Meters
	2: _RedisRadiusUnitCaption_2, // Kilometers
	3: _RedisRadiusUnitCaption_3, // Miles
	4: _RedisRadiusUnitCaption_4, // Feet
}

var _RedisRadiusUnitValueToDescriptionMap = map[RedisRadiusUnit]string{
	0: _RedisRadiusUnitDescription_0, // UNKNOWN
	1: _RedisRadiusUnitDescription_1, // Meters
	2: _RedisRadiusUnitDescription_2, // Kilometers
	3: _RedisRadiusUnitDescription_3, // Miles
	4: _RedisRadiusUnitDescription_4, // Feet
}

// Valid returns 'true' if the value is listed in the RedisRadiusUnit enum map definition, 'false' otherwise
func (i RedisRadiusUnit) Valid() bool {
	for _, v := range _RedisRadiusUnitValues {
		if i == v {
			return true
		}
	}

	return false
}

// ParseByName retrieves a RedisRadiusUnit enum value from the enum string name,
// throws an error if the param is not part of the enum
func (i RedisRadiusUnit) ParseByName(s string) (RedisRadiusUnit, error) {
	if val, ok := _RedisRadiusUnitNameToValueMap[s]; ok {
		// parse ok
		return val, nil
	}

	// error
	return -1, fmt.Errorf("Enum Name of %s Not Expected In RedisRadiusUnit Values List", s)
}

// ParseByKey retrieves a RedisRadiusUnit enum value from the enum string key,
// throws an error if the param is not part of the enum
func (i RedisRadiusUnit) ParseByKey(s string) (RedisRadiusUnit, error) {
	for k, v := range _RedisRadiusUnitValueToKeyMap {
		if v == s {
			// parse ok
			return k, nil
		}
	}

	// error
	return -1, fmt.Errorf("Enum Key of %s Not Expected In RedisRadiusUnit Keys List", s)
}

// Key retrieves a RedisRadiusUnit enum string key
func (i RedisRadiusUnit) Key() string {
	if val, ok := _RedisRadiusUnitValueToKeyMap[i]; ok {
		// found
		return val
	} else {
		// not found
		return ""
	}
}

// Caption retrieves a RedisRadiusUnit enum string caption
func (i RedisRadiusUnit) Caption() string {
	if val, ok := _RedisRadiusUnitValueToCaptionMap[i]; ok {
		// found
		return val
	} else {
		// not found
		return ""
	}
}

// Description retrieves a RedisRadiusUnit enum string description
func (i RedisRadiusUnit) Description() string {
	if val, ok := _RedisRadiusUnitValueToDescriptionMap[i]; ok {
		// found
		return val
	} else {
		// not found
		return ""
	}
}

// IntValue gets the intrinsic enum integer value
func (i RedisRadiusUnit) IntValue() int {
	return int(i)
}

// IntString gets the intrinsic enum integer value represented in string format
func (i RedisRadiusUnit) IntString() string {
	return strconv.Itoa(int(i))
}

// ValueSlice returns all values of the enum RedisRadiusUnit in a slice
func (i RedisRadiusUnit) ValueSlice() []RedisRadiusUnit {
	return _RedisRadiusUnitValues
}

// NameMap returns all names of the enum RedisRadiusUnit in a K:name,V:RedisRadiusUnit map
func (i RedisRadiusUnit) NameMap() map[string]RedisRadiusUnit {
	return _RedisRadiusUnitNameToValueMap
}

// KeyMap returns all keys of the enum RedisRadiusUnit in a K:RedisRadiusUnit,V:key map
func (i RedisRadiusUnit) KeyMap() map[RedisRadiusUnit]string {
	return _RedisRadiusUnitValueToKeyMap
}

// CaptionMap returns all captions of the enum RedisRadiusUnit in a K:RedisRadiusUnit,V:caption map
func (i RedisRadiusUnit) CaptionMap() map[RedisRadiusUnit]string {
	return _RedisRadiusUnitValueToCaptionMap
}

// DescriptionMap returns all descriptions of the enum RedisRadiusUnit in a K:RedisRadiusUnit,V:description map
func (i RedisRadiusUnit) DescriptionMap() map[RedisRadiusUnit]string {
	return _RedisRadiusUnitValueToDescriptionMap
}
