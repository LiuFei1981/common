// Code Generated By gen-enumer For "Enum Type: RedisKeyType" - DO NOT EDIT;

/*
 * Copyright 2020-2023 Aldelo, LP
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package rediskeytype

import (
	"fmt"
	"strconv"
)

const (
	_RedisKeyTypeKey_0 = "UNKNOWN"
	_RedisKeyTypeKey_1 = "String"
	_RedisKeyTypeKey_2 = "List"
	_RedisKeyTypeKey_3 = "Set"
	_RedisKeyTypeKey_4 = "ZSet"
	_RedisKeyTypeKey_5 = "Hash"
	_RedisKeyTypeKey_6 = "Stream"
)

const (
	_RedisKeyTypeCaption_0 = "UNKNOWN"
	_RedisKeyTypeCaption_1 = "String"
	_RedisKeyTypeCaption_2 = "List"
	_RedisKeyTypeCaption_3 = "Set"
	_RedisKeyTypeCaption_4 = "ZSet"
	_RedisKeyTypeCaption_5 = "Hash"
	_RedisKeyTypeCaption_6 = "Stream"
)

const (
	_RedisKeyTypeDescription_0 = "UNKNOWN"
	_RedisKeyTypeDescription_1 = "String"
	_RedisKeyTypeDescription_2 = "List"
	_RedisKeyTypeDescription_3 = "Set"
	_RedisKeyTypeDescription_4 = "ZSet"
	_RedisKeyTypeDescription_5 = "Hash"
	_RedisKeyTypeDescription_6 = "Stream"
)

// enum names constants
const (
	_RedisKeyTypeName_0 = "UNKNOWN"
	_RedisKeyTypeName_1 = "String"
	_RedisKeyTypeName_2 = "List"
	_RedisKeyTypeName_3 = "Set"
	_RedisKeyTypeName_4 = "ZSet"
	_RedisKeyTypeName_5 = "Hash"
	_RedisKeyTypeName_6 = "Stream"
)

// var declares of enum indexes
var (
	_RedisKeyTypeIndex_0 = [...]uint8{0, 7}
	_RedisKeyTypeIndex_1 = [...]uint8{0, 6}
	_RedisKeyTypeIndex_2 = [...]uint8{0, 4}
	_RedisKeyTypeIndex_3 = [...]uint8{0, 3}
	_RedisKeyTypeIndex_4 = [...]uint8{0, 4}
	_RedisKeyTypeIndex_5 = [...]uint8{0, 4}
	_RedisKeyTypeIndex_6 = [...]uint8{0, 6}
)

func (i RedisKeyType) String() string {
	switch {
	case i == UNKNOWN:
		return _RedisKeyTypeName_0
	case i == String:
		return _RedisKeyTypeName_1
	case i == List:
		return _RedisKeyTypeName_2
	case i == Set:
		return _RedisKeyTypeName_3
	case i == ZSet:
		return _RedisKeyTypeName_4
	case i == Hash:
		return _RedisKeyTypeName_5
	case i == Stream:
		return _RedisKeyTypeName_6
	default:
		return ""
	}
}

var _RedisKeyTypeValues = []RedisKeyType{
	0, // UNKNOWN
	1, // String
	2, // List
	3, // Set
	4, // ZSet
	5, // Hash
	6, // Stream
}

var _RedisKeyTypeNameToValueMap = map[string]RedisKeyType{
	_RedisKeyTypeName_0[0:7]: 0, // UNKNOWN
	_RedisKeyTypeName_1[0:6]: 1, // String
	_RedisKeyTypeName_2[0:4]: 2, // List
	_RedisKeyTypeName_3[0:3]: 3, // Set
	_RedisKeyTypeName_4[0:4]: 4, // ZSet
	_RedisKeyTypeName_5[0:4]: 5, // Hash
	_RedisKeyTypeName_6[0:6]: 6, // Stream
}

var _RedisKeyTypeValueToKeyMap = map[RedisKeyType]string{
	0: _RedisKeyTypeKey_0, // UNKNOWN
	1: _RedisKeyTypeKey_1, // String
	2: _RedisKeyTypeKey_2, // List
	3: _RedisKeyTypeKey_3, // Set
	4: _RedisKeyTypeKey_4, // ZSet
	5: _RedisKeyTypeKey_5, // Hash
	6: _RedisKeyTypeKey_6, // Stream
}

var _RedisKeyTypeValueToCaptionMap = map[RedisKeyType]string{
	0: _RedisKeyTypeCaption_0, // UNKNOWN
	1: _RedisKeyTypeCaption_1, // String
	2: _RedisKeyTypeCaption_2, // List
	3: _RedisKeyTypeCaption_3, // Set
	4: _RedisKeyTypeCaption_4, // ZSet
	5: _RedisKeyTypeCaption_5, // Hash
	6: _RedisKeyTypeCaption_6, // Stream
}

var _RedisKeyTypeValueToDescriptionMap = map[RedisKeyType]string{
	0: _RedisKeyTypeDescription_0, // UNKNOWN
	1: _RedisKeyTypeDescription_1, // String
	2: _RedisKeyTypeDescription_2, // List
	3: _RedisKeyTypeDescription_3, // Set
	4: _RedisKeyTypeDescription_4, // ZSet
	5: _RedisKeyTypeDescription_5, // Hash
	6: _RedisKeyTypeDescription_6, // Stream
}

// Valid returns 'true' if the value is listed in the RedisKeyType enum map definition, 'false' otherwise
func (i RedisKeyType) Valid() bool {
	for _, v := range _RedisKeyTypeValues {
		if i == v {
			return true
		}
	}

	return false
}

// ParseByName retrieves a RedisKeyType enum value from the enum string name,
// throws an error if the param is not part of the enum
func (i RedisKeyType) ParseByName(s string) (RedisKeyType, error) {
	if val, ok := _RedisKeyTypeNameToValueMap[s]; ok {
		// parse ok
		return val, nil
	}

	// error
	return -1, fmt.Errorf("Enum Name of %s Not Expected In RedisKeyType Values List", s)
}

// ParseByKey retrieves a RedisKeyType enum value from the enum string key,
// throws an error if the param is not part of the enum
func (i RedisKeyType) ParseByKey(s string) (RedisKeyType, error) {
	for k, v := range _RedisKeyTypeValueToKeyMap {
		if v == s {
			// parse ok
			return k, nil
		}
	}

	// error
	return -1, fmt.Errorf("Enum Key of %s Not Expected In RedisKeyType Keys List", s)
}

// Key retrieves a RedisKeyType enum string key
func (i RedisKeyType) Key() string {
	if val, ok := _RedisKeyTypeValueToKeyMap[i]; ok {
		// found
		return val
	} else {
		// not found
		return ""
	}
}

// Caption retrieves a RedisKeyType enum string caption
func (i RedisKeyType) Caption() string {
	if val, ok := _RedisKeyTypeValueToCaptionMap[i]; ok {
		// found
		return val
	} else {
		// not found
		return ""
	}
}

// Description retrieves a RedisKeyType enum string description
func (i RedisKeyType) Description() string {
	if val, ok := _RedisKeyTypeValueToDescriptionMap[i]; ok {
		// found
		return val
	} else {
		// not found
		return ""
	}
}

// IntValue gets the intrinsic enum integer value
func (i RedisKeyType) IntValue() int {
	return int(i)
}

// IntString gets the intrinsic enum integer value represented in string format
func (i RedisKeyType) IntString() string {
	return strconv.Itoa(int(i))
}

// ValueSlice returns all values of the enum RedisKeyType in a slice
func (i RedisKeyType) ValueSlice() []RedisKeyType {
	return _RedisKeyTypeValues
}

// NameMap returns all names of the enum RedisKeyType in a K:name,V:RedisKeyType map
func (i RedisKeyType) NameMap() map[string]RedisKeyType {
	return _RedisKeyTypeNameToValueMap
}

// KeyMap returns all keys of the enum RedisKeyType in a K:RedisKeyType,V:key map
func (i RedisKeyType) KeyMap() map[RedisKeyType]string {
	return _RedisKeyTypeValueToKeyMap
}

// CaptionMap returns all captions of the enum RedisKeyType in a K:RedisKeyType,V:caption map
func (i RedisKeyType) CaptionMap() map[RedisKeyType]string {
	return _RedisKeyTypeValueToCaptionMap
}

// DescriptionMap returns all descriptions of the enum RedisKeyType in a K:RedisKeyType,V:description map
func (i RedisKeyType) DescriptionMap() map[RedisKeyType]string {
	return _RedisKeyTypeValueToDescriptionMap
}
