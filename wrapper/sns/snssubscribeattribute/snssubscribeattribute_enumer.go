// Code Generated By gen-enumer For "Enum Type: SNSSubscribeAttribute" - DO NOT EDIT;

/*
 * Copyright 2020-2021 Aldelo, LP
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package snssubscribeattribute

import (
	"fmt"
	"strconv"
)

// enum names constants
const (
	_SNSSubscribeAttributeName_0 = "UNKNOWN"
	_SNSSubscribeAttributeName_1 = "DeliveryPolicy"
	_SNSSubscribeAttributeName_2 = "FilterPolicy"
	_SNSSubscribeAttributeName_3 = "RawMessageDelivery"
	_SNSSubscribeAttributeName_4 = "RedrivePolicy"
)

// var declares of enum indexes
var (
	_SNSSubscribeAttributeIndex_0 = [...]uint8{0, 7}
	_SNSSubscribeAttributeIndex_1 = [...]uint8{0, 14}
	_SNSSubscribeAttributeIndex_2 = [...]uint8{0, 12}
	_SNSSubscribeAttributeIndex_3 = [...]uint8{0, 18}
	_SNSSubscribeAttributeIndex_4 = [...]uint8{0, 13}
)

func (i SNSSubscribeAttribute) String() string {
	switch {
	case i == UNKNOWN:
		return _SNSSubscribeAttributeName_0
	case i == DeliveryPolicy:
		return _SNSSubscribeAttributeName_1
	case i == FilterPolicy:
		return _SNSSubscribeAttributeName_2
	case i == RawMessageDelivery:
		return _SNSSubscribeAttributeName_3
	case i == RedrivePolicy:
		return _SNSSubscribeAttributeName_4
	default:
		return ""
	}
}

var _SNSSubscribeAttributeValues = []SNSSubscribeAttribute{
	0, // UNKNOWN
	1, // DeliveryPolicy
	2, // FilterPolicy
	3, // RawMessageDelivery
	4, // RedrivePolicy
}

var _SNSSubscribeAttributeNameToValueMap = map[string]SNSSubscribeAttribute{
	_SNSSubscribeAttributeName_0[0:7]:  0, // UNKNOWN
	_SNSSubscribeAttributeName_1[0:14]: 1, // DeliveryPolicy
	_SNSSubscribeAttributeName_2[0:12]: 2, // FilterPolicy
	_SNSSubscribeAttributeName_3[0:18]: 3, // RawMessageDelivery
	_SNSSubscribeAttributeName_4[0:13]: 4, // RedrivePolicy
}

var _SNSSubscribeAttributeValueToKeyMap = map[SNSSubscribeAttribute]string{
	0: _SNSSubscribeAttributeKey_0, // UNKNOWN
	1: _SNSSubscribeAttributeKey_1, // DeliveryPolicy
	2: _SNSSubscribeAttributeKey_2, // FilterPolicy
	3: _SNSSubscribeAttributeKey_3, // RawMessageDelivery
	4: _SNSSubscribeAttributeKey_4, // RedrivePolicy
}

var _SNSSubscribeAttributeValueToCaptionMap = map[SNSSubscribeAttribute]string{
	0: _SNSSubscribeAttributeCaption_0, // UNKNOWN
	1: _SNSSubscribeAttributeCaption_1, // DeliveryPolicy
	2: _SNSSubscribeAttributeCaption_2, // FilterPolicy
	3: _SNSSubscribeAttributeCaption_3, // RawMessageDelivery
	4: _SNSSubscribeAttributeCaption_4, // RedrivePolicy
}

var _SNSSubscribeAttributeValueToDescriptionMap = map[SNSSubscribeAttribute]string{
	0: _SNSSubscribeAttributeDescription_0, // UNKNOWN
	1: _SNSSubscribeAttributeDescription_1, // DeliveryPolicy
	2: _SNSSubscribeAttributeDescription_2, // FilterPolicy
	3: _SNSSubscribeAttributeDescription_3, // RawMessageDelivery
	4: _SNSSubscribeAttributeDescription_4, // RedrivePolicy
}

// Valid returns 'true' if the value is listed in the SNSSubscribeAttribute enum map definition, 'false' otherwise
func (i SNSSubscribeAttribute) Valid() bool {
	for _, v := range _SNSSubscribeAttributeValues {
		if i == v {
			return true
		}
	}

	return false
}

// ParseByName retrieves a SNSSubscribeAttribute enum value from the enum string name,
// throws an error if the param is not part of the enum
func (i SNSSubscribeAttribute) ParseByName(s string) (SNSSubscribeAttribute, error) {
	if val, ok := _SNSSubscribeAttributeNameToValueMap[s]; ok {
		// parse ok
		return val, nil
	}

	// error
	return -1, fmt.Errorf("Enum Name of %s Not Expected In SNSSubscribeAttribute Values List", s)
}

// ParseByKey retrieves a SNSSubscribeAttribute enum value from the enum string key,
// throws an error if the param is not part of the enum
func (i SNSSubscribeAttribute) ParseByKey(s string) (SNSSubscribeAttribute, error) {
	for k, v := range _SNSSubscribeAttributeValueToKeyMap {
		if v == s {
			// parse ok
			return k, nil
		}
	}

	// error
	return -1, fmt.Errorf("Enum Key of %s Not Expected In SNSSubscribeAttribute Keys List", s)
}

// Key retrieves a SNSSubscribeAttribute enum string key
func (i SNSSubscribeAttribute) Key() string {
	if val, ok := _SNSSubscribeAttributeValueToKeyMap[i]; ok {
		// found
		return val
	} else {
		// not found
		return ""
	}
}

// Caption retrieves a SNSSubscribeAttribute enum string caption
func (i SNSSubscribeAttribute) Caption() string {
	if val, ok := _SNSSubscribeAttributeValueToCaptionMap[i]; ok {
		// found
		return val
	} else {
		// not found
		return ""
	}
}

// Description retrieves a SNSSubscribeAttribute enum string description
func (i SNSSubscribeAttribute) Description() string {
	if val, ok := _SNSSubscribeAttributeValueToDescriptionMap[i]; ok {
		// found
		return val
	} else {
		// not found
		return ""
	}
}

// IntValue gets the intrinsic enum integer value
func (i SNSSubscribeAttribute) IntValue() int {
	return int(i)
}

// IntString gets the intrinsic enum integer value represented in string format
func (i SNSSubscribeAttribute) IntString() string {
	return strconv.Itoa(int(i))
}

// ValueSlice returns all values of the enum SNSSubscribeAttribute in a slice
func (i SNSSubscribeAttribute) ValueSlice() []SNSSubscribeAttribute {
	return _SNSSubscribeAttributeValues
}

// NameMap returns all names of the enum SNSSubscribeAttribute in a K:name,V:SNSSubscribeAttribute map
func (i SNSSubscribeAttribute) NameMap() map[string]SNSSubscribeAttribute {
	return _SNSSubscribeAttributeNameToValueMap
}

// KeyMap returns all keys of the enum SNSSubscribeAttribute in a K:SNSSubscribeAttribute,V:key map
func (i SNSSubscribeAttribute) KeyMap() map[SNSSubscribeAttribute]string {
	return _SNSSubscribeAttributeValueToKeyMap
}

// CaptionMap returns all captions of the enum SNSSubscribeAttribute in a K:SNSSubscribeAttribute,V:caption map
func (i SNSSubscribeAttribute) CaptionMap() map[SNSSubscribeAttribute]string {
	return _SNSSubscribeAttributeValueToCaptionMap
}

// DescriptionMap returns all descriptions of the enum SNSSubscribeAttribute in a K:SNSSubscribeAttribute,V:description map
func (i SNSSubscribeAttribute) DescriptionMap() map[SNSSubscribeAttribute]string {
	return _SNSSubscribeAttributeValueToDescriptionMap
}
